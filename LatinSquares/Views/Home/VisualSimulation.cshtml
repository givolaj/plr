<style>
    .margin-bottom-10 {
        margin-bottom: 10px;
    }

    input.error {
        border: 1px solid red;
    }

    .form-group > label {
        font-size: 14px !important;
    }

    #error {
        color: #bb5588;
        margin-top: 10px;
    }

    #initialSquareDiv {
        width: 100% !important;
        margin-bottom: 10px;  
    }

    code {
        font-size: 22px !important;
    }

    .margin-left-10 {
        margin-left: 10px;
    }

    #squareInput {
        margin-bottom: 10px;
    }

    #tripletsDiv {
        width: 100% !important;
        min-height: 250px;
        overflow: auto;
        margin-bottom: 10px;
    }
</style>
<div class="jumbotron">
    <h1>Visual Simulation</h1>
    <p>See some cool stuff visually.</p>
</div>
<div class="row">

    <div class="col-md-3">
        <h2>The rectangle</h2>
        <label>Click 'PLR' to generate a rectangle, 'Edit' to edit it, and 'Go' to start the investigation.</label>
        <hr />
        <div id="initialSquareDiv"><pre>your PLR will appear here</pre></div>
        <div><textarea rows="5" class="form-control hidden" id="squareInput"></textarea></div>
        <button class="btn btn-primary btn-lg pull-left" id="randomSquareBtn">PLR</button>
        <button class="btn btn-success btn-lg pull-left margin-left-10" id="editBtn">Edit</button>
        <button class="btn btn-info btn-lg pull-left margin-left-10" id="goBtn">Go</button>
    </div>

    <div class="col-md-6 hidden" id="simulationRow">
        <h2>Graph</h2>
        <label>We're drawing a graph between two rows, drawing a solid line vertically and a dotted line diagonally where the numbers are equal.</label>
        <hr />
        <canvas id="simulationCanvas" width="500" height="300" style="background-color: #f0f0f0; border:1px solid #a0a0a0;"></canvas>
</div>
</div>

@section scripts{
    <script>
        $(document).ready(function () {
            function randomNumber(min, max) {
                return Math.floor(Math.random() * (max - min)) + min;
            }

            var rows;
            var cols;
            var symbols;
            var count;

            $("#randomSquareBtn").click(function () {
                rows = randomNumber(4, 9);
                cols = randomNumber(4, 9);
                symbols = cols > rows ? cols : rows;
                count = rows * cols - randomNumber(0, (rows * cols / 2));

                $.ajax({
                    url: "/api/GetFullRectangle?rows=" + rows + "&cols=" + cols + "&symbols=" + symbols + "&count=" + count,
                    type: "get",
                    success: function (data) {
                        $("#initialSquareDiv").html(data);
                    },
                    error: function (err) {
                        console.log(err);
                    }
                });
            });

            $("#squareInput").on("input", function (e) {
                let val = $("#squareInput").val();
                val = val.replaceAll("] [", "]\n[");
                $("#initialSquareDiv").html("<pre><code>" + val + "</code></pre>");
            });

            $("#editBtn").click(function () {
                $("#squareInput").toggleClass("hidden");
            });

            $("#goBtn").click(function () {
                if (row1 == undefined || row2 == undefined) {
                    alert('you must choose two lines in the plr');
                    return;
                }
                $("#simulationRow").removeClass("hidden");
                addGraphToCanvas();
            });

            function addGraphToCanvas() {
                let canvas = document.getElementById("simulationCanvas");
                let ctx = canvas.getContext("2d");
                let width = 400;
                ctx.clearRect(0,0,600,300);
                ctx.font = "20px Roboto bold";
                ctx.fillStyle = '#c55';
                ctx.lineWidth = 3;
                let verticalMap = {};
                let horizontalMap = {};
                $.each($(".matrix-cell"), function () {
                    let row = $(this).attr('class').split(/\s+/)[1];
                    let col = $(this).attr('class').split(/\s+/)[2].split('-')[1];
                    let digit = $(this).text();
                    if (digit == ".") digit = "_";                 
                    if (row == row1) {
                        let x = 75 + col * width / cols;
                        let y = 60;
                        ctx.fillText(digit, x, y);
                        if (verticalMap[col] == undefined) verticalMap[col] = {};
                        verticalMap[col][0] = { x: x, y: y, digit: digit };
                        if (digit != "_") {
                            if (horizontalMap[digit] == undefined) horizontalMap[digit] = {};
                            if (horizontalMap[digit][0] == undefined) horizontalMap[digit][0] = { x: x, y: y };
                            else if (horizontalMap[digit][1] == undefined) horizontalMap[digit][1] = { x: x, y: y };
                        }
                    }
                    if (row == row2) {
                        let x = 75 + col * width / cols;
                        let y = 240;
                        ctx.fillText(digit, x, y);
                        if (verticalMap[col] == undefined) verticalMap[col] = {};
                        verticalMap[col][1] = { x: x, y: y, digit: digit };
                        if (digit != "_") {
                            if (horizontalMap[digit] == undefined) horizontalMap[digit] = {};
                            if (horizontalMap[digit][0] == undefined) horizontalMap[digit][0] = { x: x, y: y };
                            else if (horizontalMap[digit][1] == undefined) horizontalMap[digit][1] = { x: x, y: y };
                        }
                    }
                });

                ctx.beginPath();
                ctx.strokeStyle = "#44bb66";
                $.each(verticalMap, function () {
                    if (this[0].digit != "_" && this[1].digit != "_") {
                        ctx.moveTo(this[0].x + 5, this[0].y + 10);
                        ctx.lineTo(this[1].x + 5, this[1].y - 25);
                        ctx.stroke();
                    }
                });
                ctx.closePath();

                ctx.beginPath();
                ctx.strokeStyle = "#4466bb";
                $.each(horizontalMap, function () {
                    console.log(this);
                    if (this[1] != undefined) {
                        if (this[0].y > this[1].y) {
                            ctx.moveTo(this[0].x + 5, this[0].y - 25);
                            ctx.lineTo(this[1].x + 5, this[1].y + 10);
                        } else {
                            ctx.moveTo(this[0].x + 5, this[0].y + 10);
                            ctx.lineTo(this[1].x + 5, this[1].y - 25);
                        }
                        ctx.stroke();
                    }
                });
                ctx.closePath();
            }

            var row1 = undefined;
            var row2 = undefined;
            $(document).on('click', '.matrix-cell', function () {               
                let row = $(this).attr('class').split(/\s+/)[1];
                if (row1 == undefined) {
                    row1 = row;
                    $("." + row).css("font-weight", "bold");
                    $("." + row).css("color", "#c55");
                } else if (row2 == undefined) {
                    row2 = row;
                    $("." + row).css("font-weight", "bold");
                    $("." + row).css("color", "#c55");
                } else {
                    $(".matrix-cell").css("font-weight", "");
                    $(".matrix-cell").css("color", "");
                    row1 = undefined;
                    row2 = undefined;
                    $(this).click();
                }
            });

        });
    </script>
}







