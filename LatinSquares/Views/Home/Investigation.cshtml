<style>
    .margin-bottom-10 {
        margin-bottom: 10px;
    }

    input.error {
        border: 1px solid red;
    }

    .form-group > label {
        font-size: 14px !important;
    }

    #error {
        color: #bb5588;
        margin-top: 10px;
    }

    #initialSquareDiv {
        width: 100% !important;
        margin-bottom: 10px;
    }
    .margin-left-10{
        margin-left: 10px;
    }
    #squareInput {
        margin-bottom: 10px;
    }
    #tripletsDiv {
        width: 100% !important;
        min-height: 250px;
        overflow: auto;
        margin-bottom: 10px;
    }

</style>
<div class="jumbotron">
    <h1>PLR Investigation</h1>
    <p>investigate a PLR, see if it's guilty.</p>
</div>
<div class="row">
    <h2>The rectangle</h2>
    <label>Click 'PLR' to generate a rectangle, 'Edit' to edit it, and 'Go' to start the investigation. Good luck!</label>
    <hr />
    <div id="initialSquareDiv"><pre>your PLR will appear here</pre></div>
    <div><textarea rows="5" class="form-control hidden" id="squareInput"></textarea></div>
    <button class="btn btn-primary btn-lg pull-left" id="randomSquareBtn">PLR</button>
    <button class="btn btn-success btn-lg pull-left margin-left-10" id="editBtn">Edit</button>
    <button class="btn btn-info btn-lg pull-left margin-left-10" id="goBtn">Go</button>
</div>
<div class="row">
    <div class="col-md-8">
        
        <br />
        <br />
        <div class="hidden" id="tripletsRow">
            <h2>Strong Entry Invariant</h2>
            <label>we're counting non empty cells in rows, columns, and no. of symbols in the whole PLR, into these triplets, which allow us to extract an ER with which we can further investigate. </label>
            <hr />
            <div id="tripletsDiv"></div>
            <button class="hidden btn btn-primary btn-lg pull-left" id="tripletsIncreaseFontSize"><i class="glyphicon glyphicon-plus"></i></button>
            <button class="hidden btn btn-default btn-lg pull-right" id="tripletsDecreaseFontSize"><i class="glyphicon glyphicon-minus"></i></button>
        </div>
        <br />
        <div class="hidden" id="ERRow">
            <h2>Basic Partitions</h2>
            <label>We're calculating partitions from the strong entry invariant matrix by counting non-empty indices in row and column and number of symbols in matrix<br /> </label>
            <hr />
            <div id="ERDiv"></div>
            <button class="btn btn-success btn-lg" style="margin-top: 20px !important;" id="refine">refine partition</button>
        </div>
    </div>
    <div class="col-md-4">
        <div class="hidden" id="comparisonMatrix">
            <h2>Comparison Matrices</h2>
            <label>For each two rows, cols and symbols, we check for isomorphism, and display those isomorphisms in a matrix.<br /> </label>
            <hr />
            <div id="comparisonMatrixDiv"></div>
            <button class="btn btn-primary btn-lg" style="margin-top: 20px !important;" id="refineG">refine partition</button>
        </div>
    </div>

    

   
</div>

@section scripts{
    <script>
        $(document).ready(function () {
            var investigationObj;

            $("#randomSquareBtn").click(function () {
                $.ajax({
                    url: "/api/GetNonTrivialRectangles?howMany=1", //"/api/GetFullRectangle?rows=" + 5 + "&cols=" + 5 + "&symbols=" + 5 + "&count=" + 23, //
                    type: "get",
                    success: function (data) {
                        $("#initialSquareDiv").html("<pre><code>" + data + "</code></pre>");
                    },
                    error: function (err) {
                        console.log(err);
                    }
                });
            });

            $("#squareInput").on("input", function (e) {
                let val = $("#squareInput").val();
                val = val.replaceAll("] [", "]\n[");
                $("#initialSquareDiv").html("<pre><code>" + val + "</code></pre>");
            });

            $("#editBtn").click(function () {
                $("#squareInput").toggleClass("hidden");
            });
   
            $("#goBtn").click(function () {
                $("#tripletsRow").removeClass("hidden");
                let squareString = $("#initialSquareDiv").text();
                $("#ERRow").removeClass("hidden");
                $("#comparisonMatrix").removeClass("hidden");
                $.ajax({
                    url: "/api/GetInvestigationObjectForRectangle?&squareString=" + squareString,
                    type: "get",
                    success: function (data) {
                        console.log(data);
                        let obj = JSON.parse(data);
                        investigationObj = obj;
                        $("#tripletsDiv").html("<div>" + obj.triplets + "</div><div style='margin-top:10px;' id='indexedTripletsDiv'>" + obj.indexedTriplets + "</div>");
                        $("#ERDiv").html("<pre><code>" + "rows: " + obj.partitions["rows"][0] +
                            "\ncolumns: " + obj.partitions["cols"][0] +
                            "\nsymbols: " + obj.partitions["symbols"][0] + "</code></pre>");
                        $("#comparisonMatrixDiv").html("<b>rows</b>" + obj.comparisonMatrixRows + "<b>cols</b>" +
                            obj.comparisonMatrixCols + "<b>symbols</b>" +
                            obj.comparisonMatrixSymbols + "<br />" + 
                            "<pre><code>" + "rows: " + obj.partitions["rowsG"][0] +
                            "\ncolumns: " + obj.partitions["colsG"][0] +
                            "\nsymbols: " + obj.partitions["symbolsG"][0] + "</code></pre>");
  
                    },
                    error: function (err) {
                        console.log(err);
                    }
                });
                
               /* $.ajax({
                    url: "/api/GetAtp?&squareString=" + squareString,
                    type: "get",
                    success: function (data) {
                        console.log(data);
                        $("#ERDiv").html("<pre><code>" + data.replaceAll(";", "<br/>") + "</code></pre>");
                    },
                    error: function (err) {
                        console.log(err);
                    }
                });*/

            });


            $("#tripletsIncreaseFontSize").click(function () {
                var fontSize = parseInt($("#tripletsDiv").find("code").css("font-size"));
                fontSize = fontSize + 1 + "px";
                $("#tripletsDiv").find("code").css({'font-size':fontSize});
            });

            $("#tripletsDecreaseFontSize").click(function () {
                var fontSize = parseInt($("#tripletsDiv").find("code").css("font-size"));
                fontSize = fontSize - 1 + "px";
                $("#tripletsDiv").find("code").css({ 'font-size': fontSize });
            });

            function indexThatContains(e, stringArr) {
                for (index = 0; index < stringArr.length; index++) {
                    if (stringArr[index].includes(e)) return index + 1;
                }
                return -1;
            }
         
            $("#refine").click(function () {
                let squareRows = [];
                let s = $("#initialSquareDiv").text().split("][");
                $.each(s, function () {
                    squareRows.push(this.replace("[", "").replace("]","").split(" "));
                });

                let partitionRow = investigationObj["partitions"].rows[0]
                    .replaceAll("[", "").replaceAll("]", "").replaceAll("}", "").replace("{", "").split(",{");
                let partitionCol = investigationObj["partitions"].cols[0]
                    .replaceAll("[", "").replaceAll("]", "").replaceAll("}", "").replace("{", "").split(",{");
                let partitionSymbol = investigationObj["partitions"].symbols[0]
                    .replaceAll("[", "").replaceAll("]", "").replaceAll("}", "").replace("{", "").split(",{");
                
                let triplets = [];
                for (i = 0; i < squareRows.length; i++) {
                    let tripletsRow = [];
                    for (j = 0; j < squareRows[i].length; j++) {
                        if (squareRows[i][j] == ".")
                            tripletsRow.push(".");
                        else 
                            tripletsRow.push("(" + indexThatContains(i + 1, partitionRow) + "," +
                             indexThatContains(j + 1, partitionCol) + ","
                                + indexThatContains(squareRows[i][j], partitionSymbol) + ")"); 
                    }
                    triplets.push(tripletsRow);
                }
                console.log(squareRows);
                console.log(triplets);
            });

        });
    </script>
}





